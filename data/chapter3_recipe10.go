// This code demonstrates the generation of random numbers using both the math/rand package and crypto/rand package.
// It compares sequences generated by math/rand and ensures cryptographic random numbers from crypto/rand are distinct.

package main

import (
	"crypto/rand"
	"fmt"
	"math/big"
	"math/rand"
)

func main() {

	// Using math/rand package
	sec1 := rand.New(rand.NewSource(10))
	sec2 := rand.New(rand.NewSource(10))
	for i := 0; i < 5; i++ {
		rnd1 := sec1.Int()
		rnd2 := sec2.Int()
		if rnd1 != rnd2 {
			fmt.Println("Rand generated non-equal sequence")
			break
		} else {
			fmt.Printf("Math/Rand1: %d , Math/Rand2: %d\n", rnd1, rnd2)
		}
	}

	// Using crypto/rand package
	for i := 0; i < 5; i++ {
		safeNum := NewCryptoRand()
		safeNum2 := NewCryptoRand()
		if safeNum == safeNum2 {
			fmt.Println("Crypto generated equal numbers")
			break
		} else {
			fmt.Printf("Crypto/Rand1: %d , Crypto/Rand2: %d\n", safeNum, safeNum2)
		}
	}
}

// NewCryptoRand generates a random number using crypto/rand package.
func NewCryptoRand() int64 {
	safeNum, err := rand.Int(rand.Reader, big.NewInt(100234))
	if err != nil {
		panic(err)
	}
	return safeNum.Int64()
}